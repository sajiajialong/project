mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69') %>%
filter(Q3!='*') %>%
filter(Q27!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q33, y=n, fill=Q1))
View(nyts2018)
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q33, y=n, fill=Q1))
nyts2018 <- NYTS_2018_full %>% select(matches("Q(1|2|3|5)[A-Z]?$"), contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>%
mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>%
mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>%
mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>%
mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>%
mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69') %>%
filter(Q1!='*') %>%
filter(Q2!='*') %>%
filter(Q3!='*') %>%
filter(Q5!='*') %>%
filter(Q27!='*') %>%
filter(Q33!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
nyts2018 <- NYTS_2018_full %>% select(matches("Q(1|2|3|5)[A-Z]?$"), contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>%
mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>%
mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>%
mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>%
mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>%
mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69') %>%
filter(Q1!='*') %>%
filter(Q2!='*') %>%
filter(Q3!='*') %>%
filter(Q5!='*') %>%
filter(Q27!='*') %>%
filter(Q33!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q33, y=n, fill=Q1))
table(nyts2018$Q1)
nyts2018 <- NYTS_2018_full %>% select(matches("Q(1|2|3|5)[A-Z]?$"), contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>%
mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>%
mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>%
mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>%
mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>%
mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69') %>%
filter(Q1!='**') %>%
filter(Q2!='*') %>%
filter(Q3!='*') %>%
filter(Q5!='*') %>%
filter(Q27!='*') %>%
filter(Q33!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q33))
nyts2018 %>% group_by(Q1, Q33) %>% count() %>%
filter(Q33!="A") %>%
ggplot() +
geom_col(aes(x=Q33, y=n, fill=Q1))
nyts2018 %>% group_by(Q1, Q27) %>% count() %>%
ggplot() +
geom_col(aes(x=Q1, y=n, fill=Q27))
nyts2018 %>% group_by(Q1, Q27) %>% count() %>%
ggplot() +
geom_col(aes(x=Q27, y=n, fill=Q1))
a <- nyts2018 %>% select('Q3', 'Q27', 'Q35', 'Q68', 'Q69') %>% na.omit() %>%
filter(Q3!='*') %>%
filter(Q27!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*') %>%
mutate(Type = ifelse(Q27<=2, "Curious","Not Curious"))
GGally::ggparcoord(sample_n(a,500), columns = c(1,3,4,5), scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 6)
# scale_color_manual(values=c("maroon","gray"))
#curious <- a %>% filter(Q27<3) %>% select(-Q27)
#notcurious <- a %>% filter(Q27>2) %>% select(-Q27)
#GGally::ggparcoord(sample_n(curious,1000), scale = "globalminmax", splineFactor = 10, alphaLines = 0.1)
#GGally::ggparcoord(sample_n(notcurious,1000), scale = "globalminmax", splineFactor = 10, alphaLines = 0.1)
nyts2018 <- NYTS_2018_full %>% select(matches("Q(1|2|3|5)[A-Z]?$"),  contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69', 'Q28','Q29','Q30','Q31','Q34','Q36','Q37') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>%
mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>%
mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>%
mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>%
mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>%
mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69', 'Q28','Q29','Q30','Q31','Q34','Q36','Q37') %>%
filter(Q1!='**') %>%
filter(Q2!='*') %>%
filter(Q3!='*') %>%
filter(Q5!='*') %>%
filter(Q27!='*') %>%
filter(Q33!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
ab <- nyts2018 %>% select('Q27','Q28','Q29','Q30','Q31','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), scale = "globalminmax", splineFactor = 10, alphaLines = 0.6)
ab <- nyts2018 %>% select('Q28','Q27','Q29','Q30','Q31','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), scale = "globalminmax", splineFactor = 10, alphaLines = 0.6)
ab <- nyts2018 %>% select('Q30','Q29','Q28','Q27','Q31','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), scale = "globalminmax", splineFactor = 10, alphaLines = 0.6)
ab <- nyts2018 %>% select('Q30','Q29','Q28','Q27','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), scale = "globalminmax", splineFactor = 10, alphaLines = 0.6)
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 1)
View(ab)
nyts2018 <- NYTS_2018_full %>% select(matches("Q(1|2|3|5)[A-Z]?$"),  contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69', 'Q28','Q29','Q30','Q31','Q34','Q36','Q37') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>%
mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>%
mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>%
mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>%
mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>%
mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
mutate(Q33 = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>%
mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>%
mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
mutate(Q5 = coalesce(Q5A,Q5B,Q5C,Q5D,Q5E)) %>%
select(matches("Q(1|2|3|5|33)$"), 'Q27', 'Q35', 'Q68', 'Q69', 'Q28','Q29','Q30','Q31','Q34','Q36','Q37') %>%
filter(Q1!='**') %>%
filter(Q2!='*') %>%
filter(Q3!='*') %>%
filter(Q34!='*') %>%
filter(Q5!='*') %>%
filter(Q27!='*') %>%
filter(Q33!='*') %>%
filter(Q35!='*') %>%
filter(Q68!='*') %>%
filter(Q69!='*')
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit()
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 1)
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit() %>%
mutate(Q28 = factor(Q28))
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 1)
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit() %>%
mutate(Q28 = factor(Q28))
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 1)
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit() %>%
filter(Q28==1)
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6, groupColumn = 1)
ab <- nyts2018 %>% select('Q28','Q30','Q29','Q27','Q34','Q35','Q36','Q37') %>% na.omit() %>%
filter(Q28==1)
GGally::ggparcoord(sample_n(ab,500), columns = 2:8,  scale = "globalminmax", splineFactor = 10, alphaLines = 0.6)
install.packages('blogdown')
blogdown::install_hugo()
1==2
install.packages(c("dplyr", "DT", "forcats", "GGally", "ggplot2", "readr", "stringr"))
install.packages('tidyverse')
install.packages('blogdown')
blogdown::install_hugo()
blogdown::build_site()
library(ggplot2)
library(dplyr)
library(GGally)
setwd("C:/Users/sheng/OneDrive/CU Second Semester/Statistical Graphics/Final Project")
questions_num <- readr::read_csv("./output/attitude/Number of Questions.csv")
questions_num$Type <- factor(questions_num$Type, levels = c("Indirectly Related", "Directly Related"))
NYTS_2018_Full <- readr::read_csv("./data/2018-NYTS/nyts2018.csv")
NYTS_2018_Selected <- NYTS_2018_Full %>% select(matches("Q(1|2|3|5)[A-Z]?$"),  contains('Q33'), 'Q27', 'Q35', 'Q68', 'Q69', 'Q28','Q29','Q30','Q31','Q34','Q36','Q37') %>%
mutate(Q33A = ifelse(Q33A==1, "A", Q33A)) %>% mutate(Q33B = ifelse(Q33B==1, "B", Q33B)) %>%
mutate(Q33C = ifelse(Q33C==1, "C", Q33C)) %>% mutate(Q33D = ifelse(Q33D==1, "D", Q33D)) %>%
mutate(Q33E = ifelse(Q33E==1, "E", Q33E)) %>% mutate(Q33F = ifelse(Q33F==1, "F", Q33F)) %>%
mutate(Q33G = ifelse(Q33G==1, "G", Q33G)) %>% mutate(Q33H = ifelse(Q33H==1, "H", Q33H)) %>%
mutate(Q33I = ifelse(Q33I==1, "I", Q33I)) %>% mutate(Q33J = ifelse(Q33J==1, "J", Q33J)) %>%
#mutate(Q33Fake = coalesce(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J)) %>%
mutate(Q33 = stringr::str_replace_all(paste(Q33A,Q33B,Q33C,Q33D,Q33E,Q33F,Q33G,Q33H,Q33I,Q33J, sep = ""),"NA","")) %>%
mutate(Q5A = ifelse(Q5A==1, "A", Q5A)) %>% mutate(Q5B = ifelse(Q5B==1, "B", Q5B)) %>%
mutate(Q5C = ifelse(Q5C==1, "C", Q5C)) %>% mutate(Q5D = ifelse(Q5D==1, "D", Q5D)) %>%
mutate(Q5E = ifelse(Q5E==1, "E", Q5E)) %>%
select(matches("Q(1|2|3)$"), 'Q27','Q28','Q29','Q30','Q31','Q34','Q35','Q36','Q37','Q68','Q69', contains('Q33')) %>%
filter(Q2!='*') %>% filter(Q3!='*') %>% filter(Q34!='*') %>% filter(Q27!='*') %>%
filter(Q35!='*') %>% filter(Q68!='*') %>% filter(Q69!='*') %>% filter(Q37!='*') %>%
filter(Q29!='**') %>% filter(Q1!='**')
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
getwd()
setwd("C:/Users/sheng/OneDrive/CU Second Semester/Statistical Graphics/Final Project")
blogdown::build_site()
setwd("C:/Users/sheng/OneDrive/CU Second Semester/Statistical Graphics/Final Project/blog/content/post")
blogdown::build_site()
setwd("C:/Users/sheng/OneDrive/CU Second Semester/Statistical Graphics/Final Project/blog/content")
blogdown::build_site()
setwd("C:/Users/sheng/OneDrive/CU Second Semester/Statistical Graphics/Final Project/blog")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
library(shiny)
vars = names(dataset)
install.packages("datasets")
install.packages("datasets")
library(shiny)
vars = names(dataset)
install.packages("datasets")
library(shiny)
vars = names(dataset)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(shiny)
vars = names(dataset)
names(dataset)
?names
library(shiny)
library(datasets)
vars = names(dataset)
library(shiny)
dataset = library(datasets)
vars = names(dataset)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('xcol', 'X Variable', vars)),
column(4, selectInput('ycol', 'Y Variable', vars,
selected = vars[2])),
column(4, numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9))
),
fluidRow(
plotOutput('kmeans', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData = reactive({
dataset[, c(input$xcol, input$ycol)]
})
clusters = reactive({
kmeans(selectedData(), input$clusters)
})
output$kmeans = renderPlot(height = 400, {
res = clusters()
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = res$cluster, pch = 20, cex = 3)
points(res$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
blogdown::serve_site()
# based on the excellent example on https://deanattali.com/blog/building-shiny-apps-tutorial/
library(shiny)
library(ggplot2)
library(data.table)
install.packages("data.table")
# based on the excellent example on https://deanattali.com/blog/building-shiny-apps-tutorial/
library(shiny)
library(ggplot2)
library(data.table)
library(DT) # for `renderDataTable`
# The data are put in a local folder named `Data`
bcl <- setDT(read.csv("./Data/bcl-data.csv", stringsAsFactors = FALSE))
# based on the excellent example on https://deanattali.com/blog/building-shiny-apps-tutorial/
library(shiny)
library(ggplot2)
library(data.table)
library(DT) # for `renderDataTable`
getwd()
# The data are put in a local folder named `Data`
bcl <- setDT(read.csv("./Data/bcl-data.csv", stringsAsFactors = FALSE))
# based on the excellent example on https://deanattali.com/blog/building-shiny-apps-tutorial/
library(shiny)
library(ggplot2)
library(data.table)
library(DT) # for `renderDataTable`
getwd()
# The data are put in a local folder named `Data`
bcl <- setDT(read.csv("./Data/bcl-data.csv", stringsAsFactors = FALSE))
# based on the excellent example on https://deanattali.com/blog/building-shiny-apps-tutorial/
library(shiny)
library(ggplot2)
library(data.table)
library(DT) # for `renderDataTable`
getwd()
# The data are put in a local folder named `Data`
bcl <- setDT(read.csv("./Data/bcl-data.csv", stringsAsFactors = FALSE))
ui <- fluidPage(
titlePanel("Shiny Example: Liquor Store Selection"),
# sidebarLayout
sidebarLayout(
# side panel
sidebarPanel(
# price, type, and country
sliderInput(inputId = "price_input", label = "Price", min = 0, max = 100,
value = c(0, 50), pre = "$"),
checkboxGroupInput("type_input", "Product Type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = c("BEER","WINE")),
# a conditional panel to select sweetness
conditionalPanel(
condition = "input.type_input.indexOf('WINE')!=-1",
p("Filter by sweetness if wine is selected:"),
sliderInput(inputId = "sweet_input", label = "Sweetness Level", min = 0, max = 10,
value = c(0, 5))
),
checkboxInput("sort_by_price", "Sort results table by price", value = TRUE),
checkboxInput("show_country", "Filter by country", value = FALSE),
# populate the country selection
conditionalPanel(
condition = "input.show_country",
p("Available selection from these countries:"),
uiOutput("country_output")
)
),
# main panel for contents
mainPanel(
tabsetPanel(
tabPanel("Results Table",
h3(textOutput("text_summary")), # add a headline of short summary
downloadLink('download_data', 'Download'), # add download option
br(),br(),
plotOutput("myplot0"),
DT::dataTableOutput("results_table")),
tabPanel("Alcohol%", plotOutput("myplot1")),
tabPanel("Sweetness", plotOutput("myplot2"))
)
)
)
)
server <- function(input, output) {
# use a reactive function to screen for available countries to be shown in list
# the input would be `country_input`
output$country_output <- renderUI({
selectInput("country_input", "Country",
select.country(), # only show available countries from list
selected = "CANADA")
})
# the select.country function to return the list of `Country`
select.country <- reactive({
# :
bcl_temp <- bcl[Price >= input$price_input[1]&
Price <= input$price_input[2]&
Type %in% input$type_input,]
if (!is.null(input$sweet_input)) bcl_temp <- bcl_temp[Sweetness >= input$sweet_input[1]&
Sweetness <= input$sweet_input[2]]
bcl_temp[, sort(unique(Country))]
})
# subset the dataset
filtered <- reactive({
bcl_temp <- bcl[Price >= input$price_input[1]&
Price <= input$price_input[2]&
Type %in% input$type_input]
if (input$show_country) bcl_temp <- bcl_temp[Country %in% input$country_input]
if (!is.null(input$sweet_input)) bcl_temp <- bcl_temp[Sweetness >= input$sweet_input[1]&
Sweetness <= input$sweet_input[2]]
if (input$sort_by_price) bcl_temp[order(Price),]
else bcl_temp[order(Country),]
})
# Add text: "There are in total # selections:"
output$text_summary <- renderText({
paste("There are in total", filtered()[,.N], "options:")
})
# The data table
output$results_table <- DT::renderDataTable({
filtered()
})
# Download buttom
output$download_data <- downloadHandler(
filename = function() {
paste('BCL_Data_Selection', Sys.Date(), '.csv', sep="")
},
content = function(file) {
write.csv(filtered(), file, row.names = F)
}
)
# Figures
## fig.1 summary of price above results table
output$myplot0 <- renderPlot({
if (is.null(filtered())){
return()
}
ggplot(filtered(), aes(x = Price, fill = Type)) +
geom_histogram(alpha = 0.7, aes(y = ..density..), position = 'identity') +
theme_bw() +
scale_fill_viridis_d(begin = 1, end = 0)+
ggtitle("Distribution of Price in the Selection") +
labs(y = "Frequency")
})
## fig.1 Alcohol Content
output$myplot1 <- renderPlot({
if (is.null(filtered())){
return()
}
ggplot(filtered(), aes(x = Alcohol_Content, fill = Type)) +
geom_histogram(alpha = 0.7, aes(y = ..density..), position = 'identity') +
theme_bw() +
scale_fill_viridis_d(begin = 1, end = 0)+
ggtitle("Distribution of Alcohol Content in the Selection") +
labs(y = "Count")
})
## fig.2 Sweetness
output$myplot2 <- renderPlot({
if (is.null(filtered())){
return()
}
ggplot(filtered(), aes(x = Sweetness, fill = Type)) +
geom_histogram(alpha = 0.7, aes(y = ..density..), position = 'identity') +
theme_bw() +
scale_fill_viridis_d(begin = 1, end = 0)+
ggtitle("Distribution of Sweetness in the Selection") +
labs(y = "Count")
})
}
shinyApp(ui = ui, server = server)
blogdown::serve_site()
knitr::include_app("https://liuyanguu.shinyapps.io/bcl_app/", height = "100%")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
